apiVersion: v1
kind: ConfigMap
metadata:
  name: demoapp-config
  namespace: kong
data:
  MESH_TYPE: kong-mesh  # set to kuma or kong-mesh
  MESH_NS: kong-mesh-system # set to the desired namespace for the mesh control plane. Defaults to kuma-system or kong-mesh-system
  REDIS_HOST: redis_kong_svc_6379.mesh
  REDIS_PORT: "80"
  secret_key: hkBxrbZ9Td4QEwgRewV6gZSVH4q78vBia4GBYuqd09SsiMsIjH
  POSTGRES_HOST: db_kong_svc_5432.mesh
  POSTGRES_USER: postgres
  POSTGRES_PASSSWORD: postgres_password
  POSTGRES_PORT: "80"
  POSTGRES_DATABASE: posts
  LC_ALL: C.UTF-8
  LANG: C.UTF-8
  fernet: TqwnupPqap-UCpNCR70KADvdtVnW0fhcFlni8muk9sQ=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: kong
  labels:
    app: user-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      annotations:
        "prometheus.io/scrape": "true"
        "prometheus.io/port": "5670"
      labels:
        app: user-service
        version: "1"
    spec:
      containers:
        - name: user-service
          image: codydearkland/user-service:beta3
          envFrom:
            - configMapRef:
                name: demoapp-config
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: kong
  annotations:
    "5000.service.kuma.io/protocol": "http"
spec:
  selector:
    app: user-service
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: posts-service
  namespace: kong
  labels:
    app: posts-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: posts-service
  template:
    metadata:
      annotations:
        "prometheus.io/scrape": "true"
        "prometheus.io/port": "5670"
      labels:
        app: posts-service
        version: "1"
    spec:
      containers:
        - name: posts-service
          image: codydearkland/posts-service:beta5
          envFrom:
            - configMapRef:
                name: demoapp-config
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: posts-service
  namespace: kong
  annotations:
    "5000.service.kuma.io/protocol": "http"
spec:
  selector:
    app: posts-service
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontreact
  namespace: kong
  labels:
    app: react
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react
  template:
    metadata:
      annotations:
        "kuma.io/gateway": enabled
        "prometheus.io/scrape": "true"
        "prometheus.io/port": "5670"
      labels:
        app: react
    spec:
      containers:
        - name: frontreact
          image: codydearkland/demo-react:v2
          ports:
            - name: web
              containerPort: 80
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: frontreact
  namespace: kong
  annotations:
    ingress.kubernetes.io/service-upstream: "true"
    #80.service.kuma.io/protocol: http
spec:
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
  selector:
    app: react
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: kong
spec:
  selector:
    matchLabels:
      app: db
  replicas: 1
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: db
          image: codydearkland/db-tier:latest
          ports:
            - containerPort: 5432
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: kong
  annotations:
    "80.service.kuma.io/protocol": "http"
spec:
  selector:
    app: db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: kong
spec:
  selector:
    matchLabels:
      app: redis
  replicas: 1
  template:
    metadata:
      annotations:
        "prometheus.io/scrape": "true"
        "prometheus.io/port": "5670"
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: kong
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
